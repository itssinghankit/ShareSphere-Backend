require("dotenv").config();

const userModel = require("../models/userModel.js");
const bcrypt = require("bcrypt");
const express = require("express");
const jwt = require("jsonwebtoken");

const generateAccessToken = require("../middlewares/authentication.js");

const createError = require("http-errors");
const joi = require("joi");
const joiAuthSchema = require("../helpers/validationSchema.js");
const { signAccessToken } = require("../helpers/jwtHelper.js");

const signup = async (req, res, next) => {

    try {

        const { email, password } = req.body;

        // if (!username || !email || !password) throw createError.BadRequest();

        //checking with joi wheather the incoming data fields are valid or not with joi
        const result = await joiAuthSchema.validateAsync(req.body);

        const doesExist = await userModel.findOne({ email: email });

        if (doesExist) throw createError.Conflict(`${email} is already registered`);

        const user = new userModel(result);
        const savedUser = await user.save();

        const accessToken = await signAccessToken(savedUser.id);

        res.status(201).json({ email, password, accessToken });

    } catch (error) {

        //if error is generated by joi then status code will be changed to 422
        if (error.isJoi === true) error.status = 422
        next(error)
    }

    // try {

    // const existingUser = await userModel.findOne({ email: email });

    // if (existingUser) {
    //     return res.status(400).json({ message: "user already exist" });
    // }

    // const hashedPassword = await bcrypt.hash(password, 10);

    // const result = await userModel.create({
    //     email: email,
    //     password: hashedPassword,
    //     username: username
    // });
    // res.status(201).json(req.body);

    // } catch (error) {
    //     res.status(500).json({ message: "Something went wrong" });
    // }

    // if(result){
    //     console.log(result);
    //     res.json({message:"user created succesfully"});
    // }

};
const signin = async (req, res, next) => {

    const { email, password } = req.body;

    try {
        const result = await joiAuthSchema.validateAsync(req.body);

        const user = await userModel.findOne({ email: email });

        if (!user) throw createError.NotFound("User not registered");

        //we will use user not userModel as this.password will save in user by findOne() method
        const isMatch = user.isValidPassword(result.password);
        if (!isMatch) throw createError.Unauthorized("Invalid username/password");

        res.status(200).json(result);

    } catch (err) {
        //if error is given by joi validation failure
        if (err.isJoi === true) next(createError.BadRequest("Invalid username/password"));

        //else other errors
        next(err);
    }

    // try {
    //     const existingUser = await userModel.findOne({ email: email });

    //     if (!existingUser) {
    //         return res.status(404).json({ message: "user does not exist" });
    //     }

    //     const matchpassword = await bcrypt.compare(password, existingUser.password);
    //     console.log(matchpassword);

    //     if (!matchpassword) {
    //         return res.status(400).json({ message: "Invalid credentials" });
    //     }

    //     const user = { email: email };

    //     const accessToken = generateAccessToken(user);
    //     const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET);
    //     res.json({ email: email, password: password, accessToken: accessToken, refreshToken: refreshToken });


    // } catch (error) {
    //     console.log(error);
    //     res.status(500).json({ message: "Something went wrong" });
    // }

};

const refreshToken = async (req, res) => {

};

module.exports = { signup, signin, refreshToken };



// customer -> app --> ro -> problem -> create ticket->
// support  -> help --> temp access check-> access token support --> expire karana hai after 24hrs of deletion of ticket // access token store send
// org -> req temp 

